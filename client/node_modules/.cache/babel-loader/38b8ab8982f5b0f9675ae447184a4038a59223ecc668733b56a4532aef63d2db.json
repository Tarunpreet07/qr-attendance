{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kaurt\\\\Documents\\\\PROJECTS\\\\qr\\\\client\\\\src\\\\components\\\\MarkAttendance.js\",\n  _s = $RefreshSig$();\n// frontend/src/pages/MarkAttendance.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Html5QrcodeScanner } from 'html5-qrcode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MarkAttendance = () => {\n  _s();\n  const {\n    id: sessionId\n  } = useParams();\n  const scannerRef = useRef(null);\n  const [message, setMessage] = useState('');\n  const [scanned, setScanned] = useState(false);\n  useEffect(() => {\n    if (!scannerRef.current) return;\n    const scanner = new Html5QrcodeScanner('qr-reader', {\n      fps: 10,\n      qrbox: 250\n    });\n    const onScanSuccess = async data => {\n      if (scanned) return;\n      setScanned(true);\n      try {\n        const res = await fetch('http://localhost:5000/api/attendance/mark', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            qrToken: data,\n            sessionId\n          })\n        });\n        const result = await res.json();\n        setMessage(result.message || 'Attendance marked');\n      } catch (err) {\n        console.error('Error:', err);\n        setMessage('Failed to mark attendance.');\n      }\n\n      // Reset scan lock after 3 seconds\n      setTimeout(() => setScanned(false), 3000);\n    };\n    const onScanError = err => {\n      console.warn('QR Scan error:', err);\n    };\n    scanner.render(onScanSuccess, onScanError);\n\n    // Cleanup on unmount\n    return () => scanner.clear().catch(console.error);\n  }, [sessionId, scanned]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mark Attendance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Scan student's QR code to mark attendance for this session.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"qr-reader\",\n      ref: scannerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(MarkAttendance, \"PIQuU8m+AZcHtqOWxgzl2FzayFg=\", false, function () {\n  return [useParams];\n});\n_c = MarkAttendance;\nexport default MarkAttendance;\nvar _c;\n$RefreshReg$(_c, \"MarkAttendance\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useParams","Html5QrcodeScanner","jsxDEV","_jsxDEV","MarkAttendance","_s","id","sessionId","scannerRef","message","setMessage","scanned","setScanned","current","scanner","fps","qrbox","onScanSuccess","data","res","fetch","method","headers","body","JSON","stringify","qrToken","result","json","err","console","error","setTimeout","onScanError","warn","render","clear","catch","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/kaurt/Documents/PROJECTS/qr/client/src/components/MarkAttendance.js"],"sourcesContent":["// frontend/src/pages/MarkAttendance.js\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Html5QrcodeScanner } from 'html5-qrcode';\r\n\r\nconst MarkAttendance = () => {\r\n  const { id: sessionId } = useParams();\r\n  const scannerRef = useRef(null);\r\n  const [message, setMessage] = useState('');\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!scannerRef.current) return;\r\n\r\n    const scanner = new Html5QrcodeScanner('qr-reader', {\r\n      fps: 10,\r\n      qrbox: 250,\r\n    });\r\n\r\n    const onScanSuccess = async (data) => {\r\n      if (scanned) return;\r\n      setScanned(true);\r\n\r\n      try {\r\n        const res = await fetch('http://localhost:5000/api/attendance/mark', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ qrToken: data, sessionId }),\r\n        });\r\n\r\n        const result = await res.json();\r\n        setMessage(result.message || 'Attendance marked');\r\n      } catch (err) {\r\n        console.error('Error:', err);\r\n        setMessage('Failed to mark attendance.');\r\n      }\r\n\r\n      // Reset scan lock after 3 seconds\r\n      setTimeout(() => setScanned(false), 3000);\r\n    };\r\n\r\n    const onScanError = (err) => {\r\n      console.warn('QR Scan error:', err);\r\n    };\r\n\r\n    scanner.render(onScanSuccess, onScanError);\r\n\r\n    // Cleanup on unmount\r\n    return () => scanner.clear().catch(console.error);\r\n  }, [sessionId, scanned]);\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Mark Attendance</h2>\r\n      <p>Scan student's QR code to mark attendance for this session.</p>\r\n      <div id=\"qr-reader\" ref={scannerRef}></div>\r\n      {message && <p><strong>{message}</strong></p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarkAttendance;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}